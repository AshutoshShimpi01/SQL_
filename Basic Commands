1. Basic SQL Commands
SELECT - Retrieve data from a table

sql
Copy code
SELECT * FROM table_name;
SELECT DISTINCT - Retrieve unique values

sql
Copy code
SELECT DISTINCT column_name FROM table_name;
WHERE - Filter records

sql
Copy code
SELECT * FROM table_name WHERE condition;
AND - Combine multiple conditions

sql
Copy code
SELECT * FROM table_name WHERE condition1 AND condition2;
OR - Alternative condition

sql
Copy code
SELECT * FROM table_name WHERE condition1 OR condition2;
ORDER BY - Sort results

sql
Copy code
SELECT * FROM table_name ORDER BY column_name ASC/DESC;
LIMIT - Restrict the number of results

sql
Copy code
SELECT * FROM table_name LIMIT number;
BETWEEN - Filter within a range

sql
Copy code
SELECT * FROM table_name WHERE column_name BETWEEN value1 AND value2;
IN - Filter within a set of values

sql
Copy code
SELECT * FROM table_name WHERE column_name IN (value1, value2, ...);
LIKE - Pattern matching

sql
Copy code
SELECT * FROM table_name WHERE column_name LIKE 'pattern';
2. Aggregate Functions
COUNT - Count rows

sql
Copy code
SELECT COUNT(column_name) FROM table_name;
SUM - Calculate the total

sql
Copy code
SELECT SUM(column_name) FROM table_name;
AVG - Calculate the average

sql
Copy code
SELECT AVG(column_name) FROM table_name;
MIN - Find the minimum

sql
Copy code
SELECT MIN(column_name) FROM table_name;
MAX - Find the maximum

sql
Copy code
SELECT MAX(column_name) FROM table_name;
GROUP BY - Group data by column

sql
Copy code
SELECT column_name, COUNT(*) FROM table_name GROUP BY column_name;
HAVING - Filter groups

sql
Copy code
SELECT column_name, COUNT(*) FROM table_name GROUP BY column_name HAVING COUNT(*) > value;
3. Joining Tables
INNER JOIN - Retrieve matching rows

sql
Copy code
SELECT * FROM table1 INNER JOIN table2 ON table1.column = table2.column;
LEFT JOIN - Retrieve all rows from the left table and matching rows from the right table

sql
Copy code
SELECT * FROM table1 LEFT JOIN table2 ON table1.column = table2.column;
RIGHT JOIN - Retrieve all rows from the right table and matching rows from the left table

sql
Copy code
SELECT * FROM table1 RIGHT JOIN table2 ON table1.column = table2.column;
FULL OUTER JOIN - Retrieve all rows when there is a match in either table

sql
Copy code
SELECT * FROM table1 FULL OUTER JOIN table2 ON table1.column = table2.column;
SELF JOIN - Join a table with itself

sql
Copy code
SELECT a.column_name, b.column_name FROM table_name a, table_name b WHERE condition;
4. Set Operations
UNION - Combine the result of two queries (no duplicates)

sql
Copy code
SELECT column_name FROM table1 UNION SELECT column_name FROM table2;
UNION ALL - Combine results, including duplicates

sql
Copy code
SELECT column_name FROM table1 UNION ALL SELECT column_name FROM table2;
INTERSECT - Find common rows between two queries

sql
Copy code
SELECT column_name FROM table1 INTERSECT SELECT column_name FROM table2;
EXCEPT - Retrieve rows from the first query that are not in the second

sql
Copy code
SELECT column_name FROM table1 EXCEPT SELECT column_name FROM table2;
5. Table Creation and Modification
CREATE TABLE - Define a new table

sql
Copy code
CREATE TABLE table_name (column1 datatype, column2 datatype, ...);
DROP TABLE - Delete a table

sql
Copy code
DROP TABLE table_name;
ALTER TABLE (ADD) - Add a new column

sql
Copy code
ALTER TABLE table_name ADD column_name datatype;
ALTER TABLE (DROP COLUMN) - Remove a column

sql
Copy code
ALTER TABLE table_name DROP COLUMN column_name;
ALTER TABLE (MODIFY) - Change the data type of a column

sql
Copy code
ALTER TABLE table_name MODIFY COLUMN column_name new_datatype;
6. Inserting, Updating, and Deleting Data
INSERT INTO - Add new rows

sql
Copy code
INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);
INSERT INTO SELECT - Copy data from one table to another

sql
Copy code
INSERT INTO table_name (column1, column2) SELECT column1, column2 FROM other_table;
UPDATE - Modify existing data

sql
Copy code
UPDATE table_name SET column_name = value WHERE condition;
DELETE - Remove data

sql
Copy code
DELETE FROM table_name WHERE condition;
TRUNCATE - Remove all rows (faster than DELETE)

sql
Copy code
TRUNCATE TABLE table_name;
7. Constraints
PRIMARY KEY - Unique identifier for a row

sql
Copy code
CREATE TABLE table_name (id INT PRIMARY KEY, ...);
FOREIGN KEY - Link to another tableâ€™s primary key

sql
Copy code
CREATE TABLE table_name (column INT, FOREIGN KEY (column) REFERENCES other_table(id));
UNIQUE - Ensure unique values in a column

sql
Copy code
CREATE TABLE table_name (column_name datatype UNIQUE);
CHECK - Validate data values

sql
Copy code
CREATE TABLE table_name (column_name datatype CHECK (condition));
DEFAULT - Set a default value

sql
Copy code
CREATE TABLE table_name (column_name datatype DEFAULT default_value);
NOT NULL - Ensure a column cannot have NULL values

sql
Copy code
CREATE TABLE table_name (column_name datatype NOT NULL);
8. Advanced Queries
SUBQUERY - Query within a query

sql
Copy code
SELECT * FROM table_name WHERE column_name = (SELECT column_name FROM other_table);
EXISTS - Check for the existence of rows

sql
Copy code
SELECT * FROM table_name WHERE EXISTS (SELECT 1 FROM other_table WHERE condition);
ANY - Compare with any value in a list

sql
Copy code
SELECT * FROM table_name WHERE column_name > ANY (SELECT column_name FROM other_table);
ALL - Compare with all values in a list

sql
Copy code
SELECT * FROM table_name WHERE column_name > ALL (SELECT column_name FROM other_table);
CASE - Conditional expressions

sql
Copy code
SELECT column_name, CASE WHEN condition THEN 'value' ELSE 'other_value' END FROM table_name;
COALESCE - Return first non-NULL value

sql
Copy code
SELECT COALESCE(column1, column2, 'default_value') FROM table_name;
NULLIF - Return NULL if values are equal

sql
Copy code
SELECT NULLIF(column1, column2) FROM table_name;
9. Indexing
CREATE INDEX - Improve query performance

sql
Copy code
CREATE INDEX index_name ON table_name(column_name);
DROP INDEX - Remove an index

sql
Copy code
DROP INDEX index_name;
